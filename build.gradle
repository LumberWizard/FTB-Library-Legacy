def version_mod = version_mods

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io/"
        }
    }
    dependencies {
        // defaults to Java 8 & UTF-8 encoding
        classpath 'com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'forge'

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

version = version_mc + "-" + version_mod
group = "latmod.ftblib"
archivesBaseName = "FTBLib"
targetCompatibility = sourceCompatibility = "1.8"
compileJava {
    targetCompatibility = sourceCompatibility = "1.8"
}

minecraft {
    version = version_mc + "-" + version_forge
    runDir = mcp_run_dir

    replace "@VERSION@", version_mod
    replaceIn "FTBLibFinals.java"
}

repositories {
    maven {
        name = "WAILA"
        url = "http://mobiusstrip.eu/maven"
    }
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile fileTree(dir: "eclipse/mods", include: '*.jar')
    compile "mcp.mobius.waila:Waila:1.5.9_1.7.10"
}

sourceSets {
    main {
        java {
            srcDir project_dir + archivesBaseName + "/src/main/java"
            srcDir project_dir + "/LatLib/src"
        }
        resources {
            srcDir project_dir + archivesBaseName + "/src/main/resources"
        }
    }
}

tasks.withType(Jar) {
    destinationDir = file(project_dir + "/Exported/")
}

processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

build.dependsOn deobfJar
build.dependsOn sourceJar